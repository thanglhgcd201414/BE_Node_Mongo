import { genAI } from "@/constants/gemini-ai";
import { SYSTEM_PROMPT } from "@/constants/prompt";
import { logger } from "@/server";
import productService from "./productService";
import { BaseSuccessResponse } from "@/config/baseResponse";
import { IResponseGemini } from "@/types/chat";

const chatBotService = {
  async analyzeQuery(userMessage: string): Promise<IResponseGemini> {
    try {
      const model = genAI.getGenerativeModel({
        model: "gemini-1.5-pro-latest",
      });

      const result = await model.generateContent(
        `${SYSTEM_PROMPT}\n\n${userMessage}`
      );
      const response = result.response;
      return JSON.parse(
        response
          .text()
          .replace(/```json/g, "")
          .replace(/```/g, "")
      );
    } catch (error: any) {
      console.log("üöÄ ~ analyzeQuery ~ error:", error);
      logger.error(`Error analyzing query: ${error.message}`);
      throw new Error("Failed to analyze query");
    }
  },
  formatProductResponse(products: any, response: IResponseGemini) {
    const res = {
      ...response,
      textResponse:
        products.length === 0
          ? "R·∫•t ti·∫øc c√≥ v·∫ª nh∆∞ s·∫£n ph·∫©m b·∫°n ƒëang t√¨m ki·∫øm ch√∫ng t√¥i kh√¥ng c√≥ s·∫µn t·∫°i c·ª≠a h√†ng. B·∫°n h√£y quay l·∫°i sau nh√©"
          : response.textResponse,
    };
    return new BaseSuccessResponse({
      message: "T√¥i ƒë√£ t√¨m th·∫•y m·ªôt s·ªë s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n.",
      data: { content: products, ...res },
    });
  },

  handleOtherIntents(analysis: IResponseGemini) {
    const responseBuilder = {
      textResponse: analysis.textResponse || "T√¥i c√≥ th·ªÉ gi√∫p g√¨ th√™m cho b·∫°n?",
      options: [] as string[],
      quickActions: [] as Array<{ textResponse: string; action: string }>,
    };

    switch (analysis.responseType) {
      case "supports":
        responseBuilder.textResponse =
          analysis.textResponse || `B·∫°n c·∫ßn h·ªó tr·ª£ v·ªÅ ƒëi·ªÅu g√¨?`;
        responseBuilder.options = [
          "Tra c·ª©u ƒë∆°n h√†ng",
          "H∆∞·ªõng d·∫´n ƒë·ªïi tr·∫£",
          "Ch√≠nh s√°ch b·∫£o h√†nh",
          "Li√™n h·ªá CSKH",
        ];
        break;

      default:
        if (analysis.queryData.brand) {
          responseBuilder.textResponse =
            analysis.textResponse ||
            `B·∫°n c·∫ßn h·ªó tr·ª£ v·ªÅ ${analysis.queryData.brand} hay m·ª•c ƒë√≠ch kh√°c?`;
          responseBuilder.quickActions = [
            {
              textResponse: `Ph·ª• ki·ªán ${analysis.queryData.brand}`,
              action: `accessory:${analysis.queryData.brand}`,
            },
            { textResponse: "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng", action: "guide:using" },
            { textResponse: "B·∫£o h√†nh", action: "support:warranty" },
          ];
        } else if (analysis.queryData.priceRange) {
          responseBuilder.textResponse =
            analysis.textResponse || "B·∫°n mu·ªën t√¨m theo:";
          responseBuilder.options = [
            "S·∫£n ph·∫©m trong ng√¢n s√°ch c·ªßa b·∫°n",
            "So s√°nh c√°c d√≤ng m√°y c√πng t·∫ßm gi√°",
            "G·ª£i √Ω ph·ª• ki·ªán k√®m theo",
          ];
        }
        break;
    }

    if (responseBuilder.options.length === 0) {
      responseBuilder.options = [
        "T√¨m s·∫£n ph·∫©m theo y√™u c·∫ßu",
        "H∆∞·ªõng d·∫´n mua h√†ng",
        "Tra c·ª©u khuy·∫øn m√£i",
      ];
    }

    responseBuilder.quickActions.push(
      { textResponse: "V·ªÅ trang ch·ªß", action: "navigate:home" },
      { textResponse: "Xem gi·ªè h√†ng", action: "navigate:cart" }
    );

    return new BaseSuccessResponse({
      message: responseBuilder.textResponse,
      data: {
        textResponse: responseBuilder.textResponse,
        options: responseBuilder.options,
        quickActions: responseBuilder.quickActions,
        metadata: analysis.queryData,
      },
    });
  },

  async handleUserMessage(userMessage: string) {
    try {
      const res = await this.analyzeQuery(userMessage);

      if (res.responseType === "search") {
        const products = await productService.searchProductByAI(res.queryData);
        return this.formatProductResponse(products.data, res);
      }

      return this.handleOtherIntents(res);
    } catch (error: any) {
      logger.error(`Error analyzing query: ${error.message}`);
      throw new Error("Failed to analyze query");
    }
  },
};

export default chatBotService;
